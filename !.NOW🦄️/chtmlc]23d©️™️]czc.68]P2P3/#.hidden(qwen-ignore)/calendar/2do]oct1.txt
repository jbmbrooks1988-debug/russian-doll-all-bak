# 2D/3D View Switching Implementation Plan

## Overview
Implement 2D/3D view switching functionality in the MVC CHTML renderer framework with "2D" and "3D" buttons above the canvas element.

## Insights from Current Implementation:
- Current game uses input.csv with format: player_x,player_y,input_command,canvas_width,canvas_height
- Current game uses output.csv with format: player_x,player_y
- Player movement is controlled by arrow keys (UP, DOWN, LEFT, RIGHT) that move the blue square by 10 pixels
- Canvas element is currently named "game_canvas" and has dimensions 400x300
- Uses canvas_render_sample() function in view.c to draw a blue square at loaded position
- Game logic is in module/game.c which processes input and updates player position
- Boundary checking is implemented to keep player within canvas

## Phase 1: Framework Modifications
1. Add view_mode attribute to canvas element (2d/3d)
2. Implement 3D rendering primitive interpreter in the MVC framework
3. Add 2D/3D toggle buttons above canvas elements
4. Test compile and run to ensure functionality works
5. Create backup tar/zip in @backup/**
6. Update chtml_legend.md with new features

## Phase 2: New Elements & Attributes
1. Add view_mode attribute to canvas element (default: "2d")
2. Add render_type attribute to support 3D primitives 
3. Add camera settings as attributes to canvas (for 3D view)
4. Test compile and run to ensure functionality works
5. Create backup tar/zip in @backup/**
6. Update chtml_legend.md with new features

## Phase 3: Core Implementation
1. Modify canvas_render_sample() to support both 2D and 3D rendering
2. Implement 3D rendering primitives interpreter
3. Add toggle functionality to switch between 2D and 3D views
4. Add buttons to UI for view switching
5. Test compile and run to ensure functionality works
6. Create backup tar/zip in @backup/**
7. Update chtml_legend.md with new features

## Phase 4: Sample Content
1. Create sample CHTML with player on platform
2. Add objects to the 3D scene
3. Create 3D voxel map.csv in module/maps/
4. Test compile and run to ensure functionality works
5. Create backup tar/zip in @backup/**
6. Update chtml_legend.md with new features

## Technical Implementation Details:
- Extend UIElement struct in view.c with 3D-specific properties
- Add 3D rendering functions that can interpret 3D primitives
- Implement 3D view using OpenGL with perspective projection
- Maintain compatibility with existing 2D game format for seamless transition
- Support for 3D objects, voxels, and scene graph primitives
- Keep the primitive interpreter modular and flexible for different apps
- Add button rendering logic to handle 2D/3D toggle
- Integrate with existing CSV-based input/output system for game state
- Support both 2D and 3D rendering paths in the canvas display function


¬©Ô∏è‚Ñ¢Ô∏è 2 ü™ÑÔ∏èüï∂Ô∏è this (view.c?) should output "rgb" (we need a font.deviate 2 do)
(i have emojis as jpgs that can be read. i think thats kinda wut fonts are 2, tbh
should beable 2 use "mnist" as well or w/e , w/e ]
