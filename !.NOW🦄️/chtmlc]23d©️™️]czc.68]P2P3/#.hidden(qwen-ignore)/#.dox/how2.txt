# How to Implement File Explorer Feature in C-HTML Framework

## Architecture Overview

The C-HTML framework follows an MVC (Model-View-Controller) pattern:
- **main_prototype_a1.c**: Main entry point, initializes MVC components and sets up GLUT callbacks
- **model.c**: Data layer (currently minimal)
- **view.c**: UI rendering and parsing of C-HTML files
- **controller.c**: Event handling and user interaction processing
- **module/**: External modules for specialized functionality

## Implementation Plan for File Explorer

### Phase 1: Basic File Explorer UI

1. **Create file_explorer.chtml**
   - Define a window panel containing:
     - Navigation bar with back/forward/up directory buttons
     - Directory listing display area (using textfield or custom panel)
     - File information status bar
   - Use existing C-HTML elements like `panel`, `button`, `textfield`
   - Add onClick handlers to navigation buttons

2. **Extend UIElement Structure (if needed)**
   - Add file explorer specific properties to existing UIElement structure in view.c
   - Consider adding file attributes like filename, directory path, file type

### Phase 2: File Operations - Open .txt Files

1. **Update Controller Component (controller.c)**
   - Add file selection handling in mouse function
   - Create function to parse selected file path
   - Implement file reading functionality
   - Add onClick event handlers for file operations

2. **Update View Component (view.c)**
   - Add file system visualization
   - Implement directory listing display
   - Modify textfield rendering to show file content
   - Add file type detection

3. **Implement File Open Functionality**
   - Add function to controller.c that opens and reads .txt files
   - Display content in a textfield/textarea element
   - Update the UI elements with file content

### Phase 3: File Operations - Save .txt Files

1. **Add Save Functionality to Controller (controller.c)**
   - Implement file saving from textfield content to .txt files
   - Add save button onClick handler
   - Ensure file format preservation

2. **Enhance Keyboard Handling**
   - Add Ctrl+S shortcut for saving
   - Add appropriate error handling for file operations

### Phase 4: Enhanced File Support

1. **Add Support for .jpg Files**
   - Use canvas element to display images
   - Implement basic image loading using stb_image.h (already in project)
   - Add file type detection for images

2. **Implement Preview Functionality**
   - Create separate canvas for image previews
   - Add appropriate handlers for different file types

### Phase 5: Advanced File Explorer Features

1. **File Upload Functionality**
   - Implement system dialog or drag-and-drop (if possible with GLUT)
   - Add upload button with corresponding handler

2. **File Organization Features**
   - Add file move, copy, delete functionality
   - Implement search functionality
   - Add multiple file selection support

3. **Drag and Drop Support**
   - Implement basic drag-and-drop if possible with GLUT
   - Add visual indicators for drag operations

## Specific Implementation Steps

### Step 1: Extend Model Component (model.c)
```c
// Add file system state management
typedef struct {
    char current_directory[512];
    char selected_file[512];
    int file_count;
    // Array of file names and types
    char files[100][256];  // For up to 100 files
    char file_types[100][10];  // For file extensions
} FileSystemState;

FileSystemState fs_state;

void init_model() {
    printf("Initializing model...\n");
    strcpy(fs_state.current_directory, ".");
    fs_state.file_count = 0;
    // Initialize other state variables
}
```

### Step 2: Update View Component (view.c)
1. Add file explorer parser support
2. Add directory listing rendering functions
3. Add file type icons (text-based initially)

### Step 3: Update Controller Component (controller.c)
1. Add directory navigation functions (cd up, cd into subdirectory)
2. Add file selection handling
3. Add file operation handlers (open, save, etc.)

### Step 4: Create File Operation Module
1. Create file_module.c for file system operations
2. Use CSV interface like existing modules (input.csv and output.csv)
3. Handle file operations in separate process for security

### Step 5: Create File Explorer C-HTML UI
1. Implement navigation controls (back, forward, up directory)
2. Create directory listing display
3. Add file operation buttons (open, save, delete, etc.)

## Security Considerations
- Implement sandboxed file access by restricting operations to current directory and subdirectories
- Validate file paths to prevent directory traversal attacks
- Use relative paths instead of absolute paths where possible

## Integration with Existing System

### Event System Integration
- Use existing onClick attributes for button events
- Integrate with existing GLUT callback system
- Use the same event handling pattern as existing code

### UI Element Integration
- Leverage existing UI elements (panel, button, textfield) with extended functionality
- Add new attributes to existing UIElement structure if needed
- Maintain consistency with existing UI patterns

## File Structure
```
chtml/
├── file_explorer.chtml    # Main file explorer UI
├── module/
│   └── file_module.c      # File operations module
└── src/
    ├── file_explorer.c    # File explorer specific functions
    ├── file_operations.c  # File operations implementation
    └── file_utils.c       # File utility functions
```

## Testing Plan
1. Test directory navigation functionality
2. Test file opening and saving for .txt files
3. Test image display for .jpg files
4. Verify security restrictions
5. Test with various file sizes and types

## Success Criteria
- [ ] Basic file explorer UI renders correctly
- [ ] Can navigate directories
- [ ] Can open .txt files in text editor
- [ ] Can save .txt files
- [ ] Can display .jpg files in canvas
- [ ] File operations work safely and reliably