
# 2do_oct2.txt - File Explorer Implementation Plan

## Goal: Implement HTML5 File Explorer in chtml framework
Add file explorer functionality allowing users to upload, preview, edit, and organize their files with ease.

## Current Project Understanding:
- C-HTML framework with MVC architecture (main_prototype_0.c, view.c, controller.c, model.c)
- Supports UI elements like window, panel, button, text, textfield, canvas, menu, etc.
- Module system using CSV files for input/output communication
- Canvas supports 2D/3D rendering
- Event handling via onClick attributes
- CHTML markup language for UI definition

## Planned Features to Implement:

### Phase 1: Basic File Explorer UI
1. Create file_explorer.chtml with:
   - Main window with file browser panel
   - Navigation controls (back, forward, up directory)
   - Directory listing display
   - File icons and names
   - Status bar showing selected file info
2. Add file explorer specific C-HTML elements if needed
3. Implement directory listing display in textfield or custom panel

### Phase 2: File Operations - Open .txt files
1. Add file selection capability in controller.c
2. Implement file opening functionality:
   - Parse selected file path
   - Read file content
   - Display content in textfield/textarea
3. Add file type detection (start with .txt)
4. Implement text editor functionality in existing textfield/textarea

### Phase 3: File Operations - Save .txt files
1. Add save functionality to controller.c
2. Implement file saving from textfield/textarea content
3. Add save dialog or save button
4. Ensure file format preservation

### Phase 4: Enhanced File Support
1. Add support for .jpg files (display in canvas)
2. Add support for audio/video files (placeholder for future)
3. Add file type detection and appropriate viewer
4. Implement preview functionality for different file types

### Phase 5: Advanced File Explorer Features
1. File upload functionality
2. File organization (move, copy, delete)
3. File search functionality
4. Multiple file selection
5. Drag and drop support (if possible with GLUT)
6. File properties display

## Implementation Steps:

### Step 1: Extend C-HTML with file explorer elements
- Add file-specific attributes to existing elements
- Determine if new elements are needed
- Update parser to handle file operations

### Step 2: Update Model Component (model.c)
- Add file system state management
- Implement file system data structures
- Track current directory, selected files, etc.

### Step 3: Update Controller Component (controller.c)
- Add file system event handlers
- Implement file selection logic
- Add file operation handlers (open, save, etc.)

### Step 4: Update View Component (view.c)
- Add file system visualization
- Implement directory listing display
- Add file icon rendering (text-based initially)

### Step 5: Create Module for File Operations
- Create file_module.c for file system operations
- Use CSV interface like existing modules
- Handle file operations in separate process for security

### Step 6: Implement File Explorer C-HTML UI
- Create file_explorer.chtml
- Design intuitive file explorer interface
- Integrate with file operation handlers

## Technical Considerations:
- Security: Sandboxed file access
- Cross-platform compatibility
- Performance with large directories
- Unicode/UTF-8 file name support
- Error handling for file operations
- Integration with existing event system

## Success Criteria:
- [ ] Basic file explorer UI renders correctly
- [ ] Can navigate directories
- [ ] Can open .txt files in text editor
- [ ] Can save .txt files
- [ ] Can display .jpg files in canvas
- [ ] File operations work safely and reliably
