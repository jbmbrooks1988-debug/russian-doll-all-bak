🔺️💞️✅️
🇬🇮️
in gcc c (no structs , just arrays) 
im gonna prompt for "2bit dumbed down risc-v computer
then bootstrapit up to 4 bit , a8bit 16,and finally a real rv32i

but (most) everything that ran on rv 2 should run on rv 32 (4/6/8/16) , get it? 
is that possible

it should have one user in and one user out from in.txt , and out.txt



(where user can put programs  and get output)

should be in swappable modules to avoid to much complexity
and allow for some parts to remain constant : 

✨
RULES/PRINCIPLES : for modularity and reuse ; we like to break code up into executable modules (seperate .c files)
{i dont want to link them on compile or use externs/headers, i want them to beable to be self contained aside from data io}
and executing them with system(); ex : system(./+x/"nand.+x 16 0 1");(or pipe etc) when they are needed.

if we need to share data among modules it should be easy because we shoud  write
 to an external file or pipe 

our executables are compiled as ".+x" and stored in "/+x/"
 readability  : no structs , use arrays instead✨
🇬🇮️
💞️
they had the nerve (while clown freeze) 2 suggest
i make the "peices" run idivisual or "bank riscv-" machines
(using c- instead of ♋️middle man ♋️
im gonna prompt for "2bit dumbed down riscv computer
then straup up 2 4 bit , a8bit 16,and finally 32 (it brakes on 64)

but i think we can strap a tiny c+ast in those tiny risc's
as well...
sometimes try 2 use those 4 calculation

(were still buidinng LLM @ home, and maybe that will be helpful4 that
2 infuse train right away. and grok will be good @ this...
(u should use existing halo netlist infra if possible...
instead of running in "c")

i'dhave liked 2 looka bit more @ peice stuff and maybe 
will do basic  2 death stuff... 

may make a "robot peice" as apposed 2 human
who doesn't eat and stuff. 
💞️
