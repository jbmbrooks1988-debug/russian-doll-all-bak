🔺️🔺️🔺️🔺️🔺️🔺️🔺️🔺️🔺️🔺️
./+x/0.platform.orb.args]🪄️🔮️]c4.+x ./+x/^.move.0_pipe]🗃️🟨️]h5.+x ./+x/103.bypass_gl]a0]PURE🪄️ 🔮️.+x ./+x/104.read_primative]b1🪄️🔮️.+x ./+x/105.rgb_gl]a0🪄️🔮️.+x 
🔺️🔺️🔺️🔺️🔺️🔺️🔺️🔺️🔺️

# 🪄️ Necromantic Rendering Pipeline 🔮️

Welcome to the *Spectral Scrying Pipeline* 🖤✨, where the *soulpen* 🖌️ conjures 3D realms from the aether (`state.txt`) into a glowing canvas (`rgb.txt`) displayed via OpenGL sorcery! This pipeline emulates a 3D OpenGL scene with a 2D pixel grid, painting tombstones 🪦 and orbs 🌑 to summon a necromancer’s vision. Ready to wield the dark arts? 🧙‍♂️ Let’s dive in!

## 🌑 What’s This Pipeline Do? 🖤

The pipeline transforms game state (`state.txt`) into a 3D-like render in a 640x480 window 📺, using three enchanted scripts:

1. **bypass_gl.c** 🗃️: Reads `state.txt`, summons `primitive.txt` with cubes and spheres.
2. **read_primitive.c** 🖌️: Projects primitives onto a 2D pixel grid, writing `rgb.txt`.
3. **rgb_gl.c** 🔮: Renders `rgb.txt` as a glowing OpenGL texture.

Together, they form a necromantic ritual:
- `state.txt` → `primitive.txt` → `rgb.txt` → *Scrying Pool Display* 📺✨
- Each script watches for changes, updating the vision in real-time! ⏰

## 🪦 The Components 🧪

### 1. bypass_gl.c 🗃️ *The Soul Archive*
- **Role**: Reads `state.txt` (game state, e.g., player position) and map files, conjuring `primitive.txt` with primitives (cubes 🪦, spheres 🌑).
- **Input**: `state.txt` (e.g., `x 0 y 0 z 6`), map files (e.g., walls).
- **Output**: `primitive.txt` (e.g., `primitive cube 0.5 0.5 0.5 0.5 0.5 0.5 0.3 type=block`).
- **Magic**: Monitors `state.txt` for changes, rewriting `primitive.txt` instantly. ⚡
- **Logs**: Scribes errors to `log.txt` (e.g., “Failed to open state.txt”).

### 2. read_primitive.c 🖌️ *The Soulpen*
- **Role**: Projects 3D primitives from `primitive.txt` onto a 2D 640x480 grid, painting `rgb.txt`.
- **Input**: `primitive.txt` (primitives with positions, colors, types).
- **Output**: `rgb.txt` (e.g., `pixel 320 240 0 0 255` for player).
- **Magic**: 
  - Centers projection on player’s position 📍.
  - Renders cubes as 5x5 pixel tombstones 🪦, spheres as single-pixel orbs 🌑.
  - Uses z-ordering to ensure cursor > player > pieces > blocks. 🔝
  - Writes full-frame pixel data to `rgb.txt`. 🖼️
- **Logs**: Records actions in `log.txt` (e.g., “Wrote pixel data to rgb.txt”).

### 3. rgb_gl.c 🔮 *The Scrying Pool*
- **Role**: Renders `rgb.txt` pixels in a 640x480 OpenGL window 📺 as a texture.
- **Input**: `rgb.txt` (pixel coordinates and RGB values).
- **Output**: Displays pixels in a GLUT window, updating on `rgb.txt` changes.
- **Magic**: 
  - Maps pixels to a 2D texture for smooth rendering. 🖼️
  - Watches `rgb.txt` every frame (~60 FPS) for updates. ⏰
  - Clears to black for empty/invalid `rgb.txt`. ⚫
- **Logs**: Notes pixel loads in `log.txt` (e.g., “Loaded 100 pixels from rgb.txt”).

## 🧙‍♂️ Setup Ritual 🕯️

### Dependencies 📦
- **OS**: Linux/Unix (for `stat()`, `fork()`).
- **Libraries**: OpenGL, GLUT (`libgl1-mesa-dev`, `freeglut3-dev` on Ubuntu).
- **Compiler**: GCC.

Install on Ubuntu:
```bash
sudo apt update
sudo apt install build-essential libgl1-mesa-dev freeglut3-dev
```

### Compile the Scripts 🛠️
```bash
gcc -o bypass_gl bypass_gl.c
gcc -o read_primitive read_primitive.c
gcc -o rgb_gl rgb_gl.c -lGL -lGLU -lglut
```

### Prepare Files 📜
1. **locations.txt** (path mappings):
   ```text
   state state.txt
   primitive primitive.txt
   log log.txt
   rgb rgb.txt
   ```
2. **state.txt** (example game state):
   ```text
   x 0.5
   y 0.5
   z 6.5
   cursor_x 3.5
   cursor_y 1.5
   cursor_z 5.5
   ```
3. **primitive.txt** (generated by `bypass_gl.c`, example):
   ```text
   primitive sphere 0.5 0.5 6.5 0.0 0.0 1.0 1.0 type=player
   primitive cube 3.5 1.5 5.5 1.0 1.0 0.0 0.3 type=cursor
   primitive cube 0.5 0.5 0.5 0.5 0.5 0.5 0.3 type=block
   text Player: (0, 0, 6)
   ```
4. **rgb.txt** (generated by `read_primitive.c`, example):
   ```text
   pixel 320 240 0 0 255
   pixel 348 228 255 255 0
   pixel 349 228 255 255 0
   ...
   ```

### Directory Structure 📂
```
├── bypass_gl
├── read_primitive
├── rgb_gl
├── locations.txt
├── state.txt
├── primitive.txt
├── rgb.txt
├── log.txt
```

## 🪄️ Usage Incantation 🖤

1. **Run the Pipeline**:
   Open three terminals and run each script:
   ```bash
   ./bypass_gl
   ./read_primitive
   ./rgb_gl
   ```
   - `bypass_gl` watches `state.txt` → writes `primitive.txt`.
   - `read_primitive` watches `primitive.txt` → writes `rgb.txt`.
   - `rgb_gl` watches `rgb.txt` → displays in GLUT window 📺.

2. **Test the Magic**:
   - Edit `state.txt` (e.g., change `cursor_x 3.5` to `4.5`).
   - Watch `primitive.txt` update, then `rgb.txt`, and see the cursor move in the GLUT window! ✨
   - Check `log.txt` for messages like:
     ```
     [Wed Jul 10 04:00:00 2025] Primitive file changed, reprocessed
     [Wed Jul 10 04:00:01 2025] Loaded 100 pixels from rgb.txt
     ```

3. **Expected Output**:
   - GLUT window shows:
     - Blue pixel 🌑 for player (~320, 240).
     - Yellow 5x5 square 🪦 for cursor (~350, 230).
     - Gray 5x5 squares 🪦 for blocks (maze-like walls).
   - Black background ⚫ for empty pixels.

## 🧪 Troubleshooting 🕵️‍♂️

- **Only one pixel in `rgb_gl`?** 😢
  - Check `rgb.txt`. If it’s one line, verify `primitive.txt` has multiple primitives.
  - Ensure `read_primitive.c` isn’t clipping primitives (e.g., adjust `PIXEL_SCALE`).
- **Segfaults?** 💥
  - Run with `gdb` (`gdb ./read_primitive`, then `run`).
  - Check `log.txt` for clues (e.g., “Failed to open primitive.txt”).
- **Black screen?** ⚫
  - Verify `rgb.txt` has pixels.
  - Ensure `rgb_gl.c` is compiled with `-lGL -lGLU -lglut`.
- **No updates?** ⏳
  - Confirm `locations.txt` paths match your files.
  - Check file permissions (`chmod +rw *.txt`).

## 🖤 Necromantic Lore 🪦

This pipeline is a *necromancer’s ritual*:
- **bypass_gl.c** 🗃️: The *Soul Archive*, gathering spirits from `state.txt`.
- **read_primitive.c** 🖌️: The *Soulpen*, painting tombstones 🪦 and orbs 🌑 onto the aether.
- **rgb_gl.c** 🔮: The *Scrying Pool*, revealing the spectral realm in OpenGL glory.
Together, they summon a 3D vision from a 2D canvas, ready to grow with more dark magic! 🧙‍♂️

---

*Conjured with 💜 by the Necromancer’s Code, July 2025* ✨
The "Wraith" is a 1986 action-fantasy film about a mysterious, supernatural being who drives a high-tech car and seeks revenge on a group of car-stealing thugs in a desert town. The movie features car chases, races, and a revenge plot fueled by a mysterious spirit known as "The Wraith". 
